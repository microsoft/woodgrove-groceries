@page
@model woodgrovedemo.Pages.ChatModel
@{
    ViewData["Title"] = "Woodgrove chat assistant";
}
<h1 style="color: green; padding-bottom: 5px; padding-top: 45px;">@ViewData["Title"]</h1>

<style>
    /* Estilos para el contenido Markdown en el chat */
    .chat-message {
        margin-bottom: 10px;
        padding: 15px;
        border-radius: 15px;
    }

    .user-message {
        background-color: rgb(251, 251, 251);
        text-align: right;
    }

    .assistant-message {
        background-color: rgb(251, 251, 251);
    }

    .system-message {
        background-color: #fffde7;
        font-style: italic;
        color: #666;
    }

    .error-message {
        background-color: #ffebee;
        color: #c62828;
    }

    /* Estilos para elementos de Markdown */
    .chat-messages table {
        border-collapse: collapse;
        width: 100%;
        margin: 10px 0;
    }

    .chat-messages th,
    .chat-messages td {
        border: 1px solid #ddd;
        padding: 8px;
        text-align: left;
    }

    .chat-messages th {
        background-color: #f2f2f2;
    }

    .chat-messages code {
        font-family: Consolas, Monaco, monospace;
        background-color: #f8f8f8;
        padding: 2px 4px;
        border-radius: 3px;
        font-size: 0.9em;
    }

    .chat-messages pre {
        background-color: #f8f8f8;
        padding: 10px;
        border-radius: 5px;
        overflow-x: auto;
        margin: 10px 0;
    }

    .chat-messages ul,
    .chat-messages ol {
        padding-left: 20px;
    }

    .chat-messages blockquote {
        border-left: 4px solid #ddd;
        padding-left: 10px;
        margin-left: 0;
        color: #666;
    }

    /* Estilos adicionales para mejorar responsividad */
    .chat-container {
        width: 80%;
        max-width: 100%;
        margin: 0;
        /* Cambiado de margin: 0 auto; para alinear a la izquierda */
    }

    @@media (max-width: 992px) {
        .chat-container {
            width: 90%;
        }
    }

    @@media (max-width: 576px) {
        .chat-container {
            width: 100%;
        }
    }

    /* Estilos para modal de tokens */
    .tokens-modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.4);
    }

    .tokens-modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 800px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .tokens-close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .tokens-close:hover,
    .tokens-close:focus {
        color: black;
        text-decoration: none;
    }

    .token-container {
        margin-bottom: 20px;
    }

    .token-textarea {
        width: 100%;
        min-height: 100px;
        font-family: monospace;
        font-size: 0.8rem;
        margin-bottom: 10px;
    }

    .token-tabs {
        display: flex;
        margin-bottom: 15px;
        border-bottom: 1px solid #ddd;
    }

    .token-tab {
        padding: 10px 15px;
        cursor: pointer;
        background: #f8f8f8;
        border: 1px solid #ddd;
        border-bottom: none;
        border-radius: 5px 5px 0 0;
        margin-right: 5px;
    }

    .token-tab.active {
        background: white;
        border-bottom: 1px solid white;
        margin-bottom: -1px;
    }

    .token-content {
        display: none;
    }

    .token-content.active {
        display: block;
    }

    /* MFA Modal Styles */
    .mfa-modal {
        display: none;
        position: fixed;
        z-index: 1100;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        overflow: auto;
        background-color: rgba(0, 0, 0, 0.5);
    }

    .mfa-modal-content {
        background-color: #fefefe;
        margin: 10% auto;
        padding: 20px;
        border: 1px solid #888;
        width: 80%;
        max-width: 600px;
        border-radius: 5px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.2);
    }

    .mfa-close {
        color: #aaa;
        float: right;
        font-size: 28px;
        font-weight: bold;
        cursor: pointer;
    }

    .mfa-close:hover,
    .mfa-close:focus {
        color: black;
        text-decoration: none;
    }

    .mfa-loading {
        text-align: center;
        padding: 20px;
    }
</style>

<div class="row">
    <div class="col-12">
        <!-- Chat Widget -->
        <div class="mt-4">
            <div class="d-flex justify-content-between align-items-center mb-2">
            </div>

            <div class="chat-container p-3 ">
                <div id="connection-status"></div>

                <div id="chatMessages" class="chat-messages mb-3 padding: 10px;"
                    style="height: 400px; overflow-y: auto;">
                    <!-- Messages will be added dynamically here -->
                </div>

                <div class="mb-2">
                    <div style="margin-bottom: 10px;"><label for="flowSelect" class="col-form-label">AI agent:</label>
                        <select id="flowSelect" class="form-select" style="display: grid; color: var(--bs-gray-700);">
                            <option value="user">Woodgrove</option>
                            <option value="support">Entra external ID deployment assistant</option>
                        </select>
                    </div>

                    <textarea id="messageInput" class="form-control" rows="3"
                        placeholder="Type your message (Enter to send, Shift+Enter for new line)..."
                        onkeydown="onEnterPressed(event)"></textarea>
                    <textarea id="messageOutput" class="form-control" rows="3" placeholder=""
                        style="display: none;"></textarea>
                </div>

                <div class="d-flex gap-2">
                    <input type="hidden" id="userId" value="@Model.UserId" />

                    <button id="sendButton" onclick="sendMessage()" class="btn btn-primary" title="Send message">
                        <div class="spinner-border text-light spinner-border-sm" style="display: none;" id="spinner"
                            role="status"> </div><i class="bi bi-send-fill" id="sendIcon"></i> Send
                    </button>

                    <button id="resetButton" onclick="resetConversation()" class="btn btn-secondary"
                        title="Reset conversation">
                        <i class="bi bi-arrow-clockwise"></i> Reset
                    </button>

                    <button id="stopButton" class="btn btn-warning" title="Stop assistant">
                        <i class="bi bi-stop-fill"></i> Stop
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>


@section Scripts {

    <!-- Include SignalR library -->
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/6.0.1/signalr.min.js"></script>

    <!-- Include marked.js library for markdown rendering -->
    <script src="https://cdn.jsdelivr.net/npm/marked/marked.min.js"></script>

    <script>
        var connection = null;

        $(document).ready(function () {
            // Initialize the connection to the SignalR hub
            connection = new signalR.HubConnectionBuilder().withUrl("/chathub").build();

            // Get the user ID
            var user = $("#userId").val();

            // Configure the on message received event
            // Most of the time, this app uses the ReceivePartialResponse event to show the response in real time.
            // However, this event is also used show system messages like error messages.
            connection.on("ReceiveMessage", onValidMessageReceived);

            // Configure the ReceiveErrorMessage event.
            // This event is triggered when the server sends an error message to the client.
            connection.on("ReceiveErrorMessage", onErrorMessageReceived);

            // Configure the ReceiveStartTyping event. 
            // This event is triggered when the server starts processing the input message.
            connection.on("ReceiveStartTyping", onReceiveStartTyping);

            // Configure the on partial message received event
            connection.on("ReceivePartialResponse", onPartialMessageReceived);

            // Configure the ReceiveEndTyping event. 
            // This event is triggered when the server is done processing the input message.
            connection.on("ReceiveEndTyping", onReceiveEndTyping);

            // Start the SignalR hub connection
            connection.start().catch(err => {
                console.error(err.toString());
                // Append the error message to the chat container
                appendMessage(user, err.toString(), "error");
            });
        });

        // This function is called when the user presses the Enter key in the message input field
        function onEnterPressed(event) {

            if (event.keyCode === 13) { // Enter key pressed
                event.preventDefault(); // Prevent form submission if necessary
                sendMessage();
            }
        }

        // This function is called when a user sends a message to the server
        function sendMessage() {

            // Get the user ID
            var user = $("#userId").val();

            // Check if the message input is not empty, if so, don't send it
            if ($("#messageInput").val().trim() === "") {
                return;
            }

            // Get the message from the input field
            var message = $("#messageInput").val().trim();

            // Log the user ID and message to the console
            console.log("Send message to user ID:", user, message);

            // Clean up the message output field
            $("#messageOutput").val("");

            // Append the message to the chat container
            appendMessage(message, "user");

            // Disable button while processing
            $("#sendButton").prop('disabled', true);
            $("#spinner").show();
            $("#sendIcon").hide();

            // Send the message to the server
            connection.invoke("SendMessage", user, message, $("#flowSelect").val())
                .catch(err => {
                    console.error("SendMessage error: " + err.toString())

                    // Append the error message to the chat container
                    appendMessage(err.toString(), "error");

                    // Enable button after processing
                    $("#sendButton").prop('disabled', false);
                    $("#spinner").hide();
                    $("#sendIcon").show();
                }
                );
        }

        // This function is called when the user clicks the reset button
        // It resets the conversation and clears the chat container
        function resetConversation() {

            // Get the user ID
            var user = $("#userId").val();

            // Clear the message input field
            $("#messageInput").val('');

            // Clear the message output fields
            $("#messageOutput").val('');
            $("#chatMessages").empty();

            // Send the message to the server
            connection.invoke("ResetConversation", user)
                .catch(err => {
                    console.error("ResetConversation error: " + err.toString())

                    // Append the error message to the chat container
                    appendMessage(err.toString(), "error");

                    // Enable button after processing
                    $("#sendButton").prop('disabled', false);
                    $("#spinner").hide();
                    $("#sendIcon").show();
                }
                );
        }

        function onValidMessageReceived(message) {

            // Log the received message to the console
            console.log("Received message:", message);

            // Handle the message
            onMessageReceived(message, "server")
        }

        function onErrorMessageReceived(message) {

            // Log the received message to the console
            console.log("Received error message:", message);

            // Handle the message
            onMessageReceived(message, "error")
        }

        // This function is triggered when a message is received from the server
        // It is used to update the chat container with the response and enable the buttons
        function onMessageReceived(message, type) {


            // Append the message to the chat container
            appendMessage(message, type);

            // Clear the message output field
            $("#messageOutput").val("");

            // Enable button after processing
            $("#sendButton").prop('disabled', false);
            $("#spinner").hide();
            $("#sendIcon").show();
        }

        // This function is triggered when a partial message is received from the server
        // It is used to update the chat container with the partial response
        function onPartialMessageReceived(message) {

            // Append the partial message to the messageOutput field
            $("#messageOutput").val($("#messageOutput").val() + message);

            // Using jQuery get the last message in the chat container
            // and append the partial message to it
            var lastMessage = $("#chatMessages").children().last();
            if (lastMessage.length > 0) {

                // Get the second element inside the last message element
                var lastMessageContent = lastMessage.children().eq(1);

                // Check the css class of the last message. If it's error-message, then don't append the message
                if (lastMessageContent.hasClass("error-message")) {
                    return;
                }

                lastMessageContent.html(marked.parse($("#messageOutput").val()));
            }
        }

        // This function is triggered when the server starts processing the input message
        // It is used to create a chat UI element that will be used to show the complete response
        function onReceiveStartTyping(message) {
            // Log the start typing event to the console
            console.log("onReceiveStartTyping:", message);

            // Append the message to the chat container
            appendMessage(message, "server");

            // Clear the message output field
            $("#messageOutput").val("");

            // Clear the message input field
            $("#messageInput").val('')
        }

        // This function is triggered when the server is done processing the input message
        // It's used to update the UI and enable the buttons
        function onReceiveEndTyping(message, satistic) {

            // Log the end typing event to the console
            console.log("onReceiveEndTyping:", message);

            // Check if the satistic is not null and print it to the console
            if (satistic != null) {
                console.log(satistic);
            }

            // Enable button after processing
            $("#sendButton").prop('disabled', false);
            $("#spinner").hide();
            $("#sendIcon").show();
        }

        // Function to append messages to the chat container
        function appendMessage(message, type) {

            var messageClass = '';

            // Check if the message is a user message or an assistant message
            if (type === "user") {
                message = '<b>You: </b><span>' + message + '</span>';
                messageClass = "user-message";
            }
            else if (type === "server") {
                message = '<b>Woodgrove: </b><span>' + marked.parse(message) + '</span>';
                messageClass = "assistant-message";
            }
            else if (type === "error") {

                // Check if the message contains the IDW10502 error message
                if (message.includes("IDW10502")) {
                    message = "Your access token has expired or is invalid. Please <a href='/SignIn?handler=ChatReauth'>sign-in</a> with your credentials to continue."
                    messageClass = "error-message";
                    console.log("The user is not authenticated. Show the sign in link.");
                } else {
                    message = '<b>Error: </b><span>' + message + '</span>';
                    messageClass = "error-message";
                }
            }

            var messageUi = `<div class="chat-message ${messageClass}">${message}</div>`;
            $("#chatMessages").append(messageUi);
            $("#chatMessages").scrollTop($("#chatMessages")[0].scrollHeight);
        }
    </script>
}
