@page
@model woodgrovedemo.Pages.TokenModel
@{
}
<h1 style="color: green; padding-bottom: 15px; padding-top: 15px;">Your claims and access token</h1>

<div class="container">
    <table class="table table-striped">
        <thead>
            <tr>
                <th scope="col">Claim</th>
                <th scope="col">Value</th>
            </tr>
        </thead>
        <tbody>


            @foreach (var claim in User.Claims)
            {
                <tr>
                    <td scope="row" style="color: #1b1b1b;">@claim.Type</td>
                    <td class="text-break">@claim.Value</td>
                </tr>
            }
        </tbody>
    </table>

    <p>
        <button class="btn header-button" type="button" data-bs-toggle="collapse" data-bs-target="#collapseExample"
            aria-expanded="false" aria-controls="collapseExample">
            <i class="bi bi-file-earmark-lock" ></i> Access token to call a web API
        </button>


        <a class="btn header-button" role="button" href="/SignIn?handler=TokenSignin"><i class="bi bi-person"></i> Sign-in with SSO</a>
    </p>
    <div class="collapse" id="collapseExample">
        
        @if (!string.IsNullOrEmpty(@Model.AccessToken))
        {
            <span>The <a href='https://jwt.ms/#access_token=@Model.AccessToken.Replace("Bearer ", "")'
                    target="_blank">https://jwt.ms</a> shows the access token used to call a web API (Account API).</span>
        }

        @if (!string.IsNullOrEmpty(@Model.AccessTokenError))
        {
            <div class="alert alert-danger" role="alert">
                @Model.AccessTokenError
            </div>
        }

        <br>&nbsp;<br>
                

        @if (!string.IsNullOrEmpty(@Model.DownstreamAccessToken))
        {
            <span>
                For the <b>Account </b>API to make authenticated requests to the downstream <b>Payment</b> API, it needs an
            access token for different audience and another set of scopes (permissions). To get that access token, the <b>Account</b> API utilizes the OAuth 2.0 On-Behalf-Of flow.

            </span>
            <span>The <a href='https://jwt.ms/#access_token=@Model.DownstreamAccessToken.Replace("Bearer ", "")'
                    target="_blank">https://jwt.ms</a> shows the access token acquired by the <b>Account</b> API to call the downstream <b>Payment</b> API.</span>
        }

        @if (!string.IsNullOrEmpty(@Model.DownstreamAccessTokenError))
        {
            <div class="alert alert-danger" role="alert">
                @Model.DownstreamAccessTokenError
            </div>
        }
        
    </div>
</div>

@section AboutThisDemo{
    <div>
        This demo shows the <b>ID token</b> user's <b>claims</b>. The ID token is the core extension that OpenID Connect
        makes to OAuth 2.0. ID tokens are issued by Microsoft Entra ID for customers and contain claims that carry information about you.

        <br />&nbsp;<br />
        ID tokens are intended to be understood by your applications. Information in ID Tokens allows the applications to
        verify that a user is who they claim to be.
    </div>
}